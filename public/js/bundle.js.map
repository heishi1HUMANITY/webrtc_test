{"version":3,"sources":["webpack://workspace/./src/video.ts","webpack://workspace/./src/main.ts","webpack://workspace/./src/webrtc.ts"],"names":["navigator","mediaDevices","getUserMedia","video","audio","peerConnection","localStream","prepareNewConnection","isOffer","remoteVideo","textForSendSdp","peer","RTCPeerConnection","ontrack","evt","console","log","stream","srcObject","play","onicecandidate","candidate","sendSdp","localDescription","onnegotiationneeded","createOffer","offer","setLocalDescription","error","getTracks","forEach","track","addTrack","warn","description","value","sdp","focus","select","myVideo","document","querySelector","receivedVideo","receiveSdp","textForSetSdp","then","addEventListener","textToReceiveSdp","text","sessionDescription","setRemoteDescription","createAnswer","answer","makeAnswer","setOffer","RTCSessionDescription","type"],"mappings":"mBAEA,mBAAe,O,OAAA,E,OAAA,E,EAAA,W,qlCACA,SAAMA,UAAUC,aAAaC,aAAa,CAAEC,OAAO,EAAMC,OAAO,K,OAC7E,MAAO,CAAP,EADa,e,YADA,K,mRCOXC,EACAC,E,60CCNSC,EAAuB,SAACC,EAAkBC,EAA+BH,EAA0BI,GAC9G,IAAMC,EAAO,IAAIC,kBAuCjB,OArCAD,EAAKE,QAAU,SAAOC,GAAG,0C,wDAEV,OADbC,QAAQC,IAAI,oBACC,GAAM,K,cAAfC,EAAS,SACbR,EAAYS,UAAYD,EACxBR,EAAYU,O,YAGdR,EAAKS,eAAiB,SAAAN,GAChBA,EAAIO,UACNN,QAAQC,IAAIF,EAAIO,YAEhBN,QAAQC,IAAI,mBACZM,EAAQX,EAAKY,iBAAkBb,KAInCC,EAAKa,oBAAsB,qD,uFAEnBhB,EACU,GAAMG,EAAKc,eADrB,M,OAGF,OAFIC,EAAQ,SACZX,QAAQC,IAAI,oCACZ,GAAML,EAAKgB,oBAAoBD,I,OAA/B,SACAX,QAAQC,IAAI,4CACZM,EAAQX,EAAKY,iBAAkBb,G,sDAGjCK,QAAQa,MAAM,qCAAqC,G,+BAInDtB,GACFS,QAAQC,IAAI,0BACZV,EAAYuB,YAAYC,SAAQ,SAAAC,GAAS,OAAApB,EAAKqB,SAASD,EAAOzB,OAE9DS,QAAQkB,KAAK,kCAGRtB,GAGIW,EAAU,SAACY,EAAoCxB,GAC1DK,QAAQC,IAAI,qBACZN,EAAeyB,MAAQD,EAAYE,IACnC1B,EAAe2B,QACf3B,EAAe4B,UDjDXC,EAA4BC,SAASC,cAAc,YACnDC,EAAkCF,SAASC,cAAc,kBACzD,EAA6BD,SAASC,cAAc,YACpD/B,EAAsC8B,SAASC,cAAc,mBAC7DE,EAAgCH,SAASC,cAAc,eACvDG,EAAqCJ,SAASC,cAAc,kBAOlE,IACCI,MAAK,SAAA5B,GACJX,EAAcW,EACdsB,EAAQrB,UAAYD,EACpBsB,EAAQpB,UAIV,EAAQ2B,iBAAiB,SAAS,WAAM,OCgCjB,SAACzC,EAAmCI,EAA+BH,EAA0BI,GAC7GL,EAIHU,QAAQkB,KAAK,wBAHblB,QAAQC,IAAI,cACZX,EAAiBE,GAAqB,EAAME,EAAaH,EAAaI,IDnClC,CAAYL,EAAgBqC,EAAepC,EAAaI,MAEhGiC,EAAWG,iBAAiB,SAAS,WAAM,OCwDlB,SAACzC,EAAmC0C,EAAuCtC,EAA+BH,EAA0BI,GAC3J,IAAMsC,EAAOD,EAAiBZ,MAS5BpB,QAAQC,IAAI,0BAUC,SAAOX,EAAmC4C,EAA2CxC,EAA+BH,EAA0BI,GAAmC,mC,wDAC5LL,GACFU,QAAQa,MAAM,iCAEhBvB,EAAiBE,GAAqB,EAAOE,EAAaH,EAAaI,G,iBAErE,O,sBAAA,GAAML,EAAe6C,qBAAqBD,I,cAA1C,SACAlC,QAAQC,IAAI,mDA5CG,SAAOX,EAAmCK,GAAmC,mC,0DAE9F,GADAK,QAAQC,IAAI,2DACPX,EAEH,OADAU,QAAQa,MAAM,6BACd,I,iBAGa,O,sBAAA,GAAMvB,EAAe8C,gB,OAElC,OAFIC,EAAS,SACbrC,QAAQC,IAAI,qCACZ,GAAMX,EAAesB,oBAAoByB,I,cAAzC,SACArC,QAAQC,IAAI,4CACZM,EAAQjB,EAAekB,iBAAkBb,G,+BAEzCK,QAAQa,MAAM,G,8BAgCdyB,CAAWhD,EAAgBK,G,+BAE3BK,QAAQa,MAAM,sCAAsC,G,8BAfpD0B,CAASjD,EAJK,IAAIkD,sBAAsB,CACtCC,KAAM,QACNpB,IAAKY,IAEyBvC,EAAaH,EAAaI,GAE5DqC,EAAiBZ,MAAQ,GDzEgB,CAAc9B,EAAgBuC,EAAeF,EAAepC,EAAaI,O","file":"bundle.js","sourcesContent":["'use strict';\n\nexport default async () => {\n  let stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\n  return stream;\n};","'use strict';\n\nconst myVideo: HTMLVideoElement = document.querySelector('#myVideo');\nconst receivedVideo: HTMLVideoElement = document.querySelector('#receivedVideo');\nconst connect: HTMLButtonElement = document.querySelector('#connect');\nconst textForSendSdp: HTMLTextAreaElement = document.querySelector('#textForSendSdp');\nconst receiveSdp: HTMLButtonElement = document.querySelector('#receiveSdp');\nconst textForSetSdp: HTMLTextAreaElement = document.querySelector('#textForSetSdp');\n\nlet peerConnection: RTCPeerConnection;\nlet localStream: MediaStream;\n\nimport startVideo from './video';\n\nstartVideo()\n.then(stream => {\n  localStream = stream;\n  myVideo.srcObject = stream;\n  myVideo.play();\n});\n\nimport * as rtc from './webrtc';\nconnect.addEventListener('click', () => rtc.connect(peerConnection, receivedVideo, localStream, textForSendSdp));\n\nreceiveSdp.addEventListener('click', () => rtc.onSdpText(peerConnection, textForSetSdp, receivedVideo, localStream, textForSendSdp));\n","'use strict';\n\nimport startVideo from './video';\n\nexport const prepareNewConnection = (isOffer: boolean, remoteVideo: HTMLVideoElement, localStream: MediaStream, textForSendSdp: HTMLTextAreaElement) => {\n  const peer = new RTCPeerConnection();\n\n  peer.ontrack = async (evt) => {\n    console.log('--peer.ontrack()');\n    let stream = await startVideo();\n    remoteVideo.srcObject = stream;\n    remoteVideo.play();\n  };\n\n  peer.onicecandidate = evt => {\n    if (evt.candidate) {\n      console.log(evt.candidate);\n    } else {\n      console.log('empty ice event');\n      sendSdp(peer.localDescription, textForSendSdp);\n    }\n  };\n\n  peer.onnegotiationneeded = async () => {\n    try {\n      if (isOffer) {\n        let offer = await peer.createOffer();\n        console.log('createOffer() success in promise');\n        await peer.setLocalDescription(offer);\n        console.log('setLocalDescription() success in promise');\n        sendSdp(peer.localDescription, textForSendSdp);\n      }\n    } catch (err) {\n      console.error(`setLocalDescription(offer) ERROR: ${err}`);\n    }\n  }\n\n  if (localStream) {\n    console.log('Adding local stream...');\n    localStream.getTracks().forEach(track => peer.addTrack(track, localStream));\n  } else {\n    console.warn('no local stream, but continue.');\n  }\n\n  return peer;\n}\n\nexport const sendSdp = (description: RTCSessionDescription, textForSendSdp: HTMLTextAreaElement) => {\n  console.log('---sending sdp---');\n  textForSendSdp.value = description.sdp;\n  textForSendSdp.focus();\n  textForSendSdp.select();\n};\n\nexport const connect = (peerConnection: RTCPeerConnection, remoteVideo: HTMLVideoElement, localStream: MediaStream, textForSendSdp: HTMLTextAreaElement) => {\n  if (!peerConnection) {\n    console.log('make Offer');\n    peerConnection = prepareNewConnection(true, remoteVideo, localStream, textForSendSdp);\n  } else {\n    console.warn('peer already exist.');\n  }\n};\n\nconst makeAnswer = async (peerConnection: RTCPeerConnection, textForSendSdp: HTMLTextAreaElement) => {\n  console.log('sending Answer. Creating remote session description...');\n  if (!peerConnection) {\n    console.error('peerConnection NOT exist.');\n    return;\n  }\n  try {\n    let answer = await peerConnection.createAnswer();\n    console.log('createAnswer() success in promise');\n    await peerConnection.setLocalDescription(answer);\n    console.log('setLocalDescription() success in promise');\n    sendSdp(peerConnection.localDescription, textForSendSdp);\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nexport const onSdpText = (peerConnection: RTCPeerConnection, textToReceiveSdp: HTMLTextAreaElement, remoteVideo: HTMLVideoElement, localStream: MediaStream, textForSendSdp: HTMLTextAreaElement) => {\n  const text = textToReceiveSdp.value;\n  if (peerConnection) {\n    console.log('Received answer text...');\n    const answer = new RTCSessionDescription({\n      type: 'answer',\n      sdp: text\n    });\n    setAnswer(peerConnection, answer);\n  } else {\n    console.log('received offer text...');\n    const offer = new RTCSessionDescription({\n      type: 'offer',\n      sdp: text\n    });\n    setOffer(peerConnection, offer, remoteVideo, localStream, textForSendSdp);\n  };\n  textToReceiveSdp.value = '';\n}\n\nconst setOffer = async (peerConnection: RTCPeerConnection, sessionDescription: RTCSessionDescription, remoteVideo: HTMLVideoElement, localStream: MediaStream, textForSendSdp: HTMLTextAreaElement) => {\n  if (peerConnection) {\n    console.error('peerConnection already exist!');\n  }\n  peerConnection = prepareNewConnection(false, remoteVideo, localStream, textForSendSdp);\n  try {\n    await peerConnection.setRemoteDescription(sessionDescription);\n    console.log('setRemoteDescription(answer) success in promise');\n    makeAnswer(peerConnection, textForSendSdp);\n  } catch (err) {\n    console.error(`setRemoteDescription(offer) ERROR: ${err}`);\n  }\n};\n\nconst setAnswer = async (peerConnection: RTCPeerConnection, sessionDescription: RTCSessionDescription) => {\n  if (!peerConnection) {\n    console.error('peerConnection NOT exist!');\n    return;\n  }\n  try {\n    await peerConnection.setRemoteDescription(sessionDescription);\n    console.log('setRemoteDescription(answer) success in promise');\n  } catch (err) {\n    console.error(`setRemoteDescription(answer) ERROR: ${err}`);\n  }\n};\n"],"sourceRoot":""}